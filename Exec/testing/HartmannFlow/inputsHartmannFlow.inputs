#======== AMREX ==========
amrex.fpe_trap_invalid=1
amrex.fpe_trap_zero=1
fpe_trap_overflow=1
amr.v = 0

# ======== TIME ==========
max_step  = 1 #1000000000
stop_time = 100.0 #0.030973980073944

# ======== DOMAIN ==========
geometry.is_periodic = 0 1 1  
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical

# lo. res.
geometry.prob_lo     = -0.5 
geometry.prob_hi     = 0.5 
amr.n_cell           = 128

# ======== LOAD BALANCE ==========
amr.loadbalance_with_workestimates = 1
amr.loadbalance_level0_int = 10

# ======== GRID ==========
amr.max_level       = 0        # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 2 2 2 2 2 # refinement ratio
amr.regrid_int      = 2 2 2 2 2 2 2 2 2 # how often to regrid
amr.blocking_factor = 4
amr.max_grid_size   = 32
amr.n_error_buf     = 4 4 4 4 4 4 4 4 4 # number of buffer cells in error est
amr.grid_eff        = 0.75     # what constitutes an efficient grid
amr.subcycling_mode = Auto # time sub-cycling (Auto, None, Manual, Optimal)

# ======== GEOMETRY ==========
eb2.geom_type = all_regular

# ======== PARTICLES ==========
particles.do_particles = 1
particles.v = 0

# ======== OUTPUT ==========

# CHECKPOINT FILES
amr.checkpoint_files_output = 1
amr.check_file              = Hartmann-H1-option-16-FB-1D.chk    # root name of checkpoint file
amr.check_int               = -50000    # number of timesteps between checkpoints
amr.check_per               = 1.

# PLOTFILES
amr.plot_files_output = 1
amr.plot_file         = Hartmann-H1-option-16-FB-1D.plt     # root name of plotfile
amr.plot_int          = -10000     # number of timesteps between plotfiles
amr.plot_per          = 0.1

# ======== PROBLEM DESCRIPTION ==========
# Note that the problem description is defined as a lua script
# Everything within the double quotes "..." must conform to lua standards
# Note that any strings should therefore be defined by single quotes '...'

mfp.lua = "
-- ========== SOLVER SETTINGS ========
verbosity = 0
cfl = 0.5
cfl_viscous = 1.
--force_dt = 1e-5

-- === DEFINE PROBLEM ===
print('\n\n==========\nEelctron mass set to 0.001\n=========\n\n')
hydro_mass  = {0.01, 1.0}
hydro_charge = {-1., 1.}
hydro_gamma = {5/3.0, 5/3.0}

--constants 
mu_0_dim = 1.25663706e-6 
ep_0_dim = 8.85418782e-12
kb = 1.38064852e-23

ref_lightspeed = 299792458.0; --dimensional speed of light 
q_ref = 1.60217662e-19 -- Coulombs
m_ref = 1.6726219000e-27 -- kg 

-- REFERENCE VALUES 
lightspeed = 2000; lightspeed_nd = lightspeed
ref_length = 1e-8 
ref_mass = m_ref
ref_density = 1e31*m_ref
beta = 1

ref_velocity = ref_lightspeed/lightspeed;
ref_T = ref_mass*ref_velocity*ref_velocity/kb

n_ref = ref_density/ref_mass
B_ref = math.sqrt(2*mu_0_dim*n_ref*ref_mass*ref_velocity*ref_velocity/beta)
ref_omega_c = q_ref*B_ref/ref_mass; 
ref_omega_p = math.sqrt(n_ref*q_ref*q_ref/ref_mass/ep_0_dim); 
ref_nu_p = 12*math.pow(math.pi, 3./2.)*ep_0_dim*ep_0_dim*math.sqrt(ref_mass)*math.pow(kb*ref_T, 3./2.)/(10*math.pow(q_ref, 4)*ref_density/ref_mass)
ref_nu_p = 1/ref_nu_p

ref_larmor_dim = ref_velocity/ref_omega_c;
ref_skin_dim = ref_mass/(q_ref*math.sqrt(mu_0_dim*ref_density)) 
ref_skin_nd = ref_skin_dim/ref_length;
print('\nNon dimensional ion skin depth:\t', ref_skin_nd)
print('Dimensional ion skin depth:\t', ref_skin_dim)
Larmor = ref_larmor_dim/ref_length --======================================important 
Debye = ref_skin_nd/lightspeed_nd --=======================================important 

ref_time = ref_length/ref_velocity
print('omega_c_tau\t', ref_omega_c*ref_time, '\nomega_p_tau\t', ref_omega_p*ref_time, '\nnu_p_tau\t', ref_nu_p*ref_time)

betaBoi = 2*(Larmor/ref_skin_nd)^2 -- magnetic interaction parameter
print('\nbeta_0', betaBoi)

-- NON-DIMENSIONAL CONSTANTS
v_plate = 1e-3
n0_nd = 1.0; Bx0_nd = 1.0; By0_nd = 0.0; Bz0_nd = 0; T0_nd = 0.5; 
print('\nBx0_nd = ', Bx0_nd)
--  magnetic field strength
--[[
B = {0,0,0}
axis_beta = {5e-1, 0, 0} --{5e4, 0, 0}
p = T0_nd*n0_nd * 2 -- use total pressure 

for i, b in ipairs(axis_beta) do
    if b > 0 then
        B[i] = math.sqrt(p*beta/b)
        print('i = ', i, '\tBi = ', B[i])
    end
end
--]]
-- ======== FLUID FUNCTIONS ==========

-- === DEFINE STATES ===
states = {
    ion = {
        type='hydro',
        gas = {
          typed = 'thermally_perfect',
          mass=hydro_mass[2],  
          charge= hydro_charge[2], 
          gamma=hydro_gamma[2], 
        }, 
        reconstruction='vanLeer',
        flux='HLLC',
        refinement={name='hydro_gradient', z_vel=0.000001, y_vel=0.01},
        value={
            rho=n0_nd*hydro_mass[2],
            p=T0_nd*n0_nd,
        },
        bc={
            x={lo={fill_hydro_bc='noslipwall',
                   y_vel=-v_plate,
                  },
               hi={fill_hydro_bc='noslipwall',
                   y_vel=v_plate,
                  },
              },
        },
    },

    electron = {
        type='hydro',
        gas = {
          type='thermally_perfect', 
          mass=hydro_mass[1],  
          charge=hydro_charge[1], 
          gamma=hydro_gamma[1], 
        }, 
        reconstruction='vanLeer',
        flux='HLLC',
        refinement={name='hydro_gradient', z_vel=0.0001, y_vel=0.01},
        value={
            rho=n0_nd*hydro_mass[1],
            p=T0_nd*n0_nd,
        }, 
        bc={
            x={lo={fill_hydro_bc='noslipwall',
                   y_vel=-v_plate, 
                  },
               hi={fill_hydro_bc='noslipwall',
                   y_vel=v_plate, 
                  },
              },
        },
    },

    field = {
        type='field',
        reconstruction='O6',
        flux='HLLE',
        value={x_B=Bx0_nd,
        },
        dynamic={'x_B'}, 
        bc={
            x={lo={fill_B_bc='asymmetry',
                   fill_D_bc='asymmetry', 
                  },
               hi={fill_B_bc='asymmetry',
                   fill_D_bc='asymmetry',
                  },
              },
        },
        project_divergence=0, 
    }
}

actions={
    braginskii = {
        -- this handles inviscid and viscous fluxes as well as inter-species collisions
        type = 'BraginskiiCTU',
        corner_transport=true,
        srin_switch = false,
        anisotropic = false,
        cfl=1.0,
        force_ion_viscosity = 0.0019055310140848752,
        force_electron_viscosity = 0.00010288066562860091,
        do_inter_species=false, 
        do_intra_species=true, 
        time_refinement_factor = 10,
        max_time_refinement_levels = 100,
        states = {ion='ion', electron='electron', field='field'},
    },

    plasma={
        type='plasma5',
        solver = 'explicit',
        states = {'ion', 'electron', 'field',},
     },
}


-- === PLOTTING ===
plot={
      variables={
      'all',
      'x_D-field-dx',
      'y_D-field-dx',
      'z_D-field-dx',
      'x_B-field-dx',
      'y_B-field-dx',
      'z_B-field-dx',
      'p-electrons-dx',
      'p-ions-dx',
      'x_vel-ions-dx',
      'y_vel-ions-dx',
      'z_vel-ions-dx',
      'x_vel-electrons-dx',
      'y_vel-electrons-dx',
      'z_vel-electrons-dx',
      'T-ions-dx', 
      'T-electrons-dx', 
      'charge-electrons', 
      'charge-ions', 
      'mass-ions', 
      'mass-electrons', 
      'rho-electrons',
      'rho-ions',
      }, 
      functions={
      }, 
}


"
