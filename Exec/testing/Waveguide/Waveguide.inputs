#======== AMREX ==========
amrex.fpe_trap_invalid=1
amrex.fpe_trap_zero=1
fpe_trap_overflow=1
amr.v = 0

# ======== TIME ==========
max_step  = 1000000
stop_time = 25

# ======== DOMAIN ==========
geometry.is_periodic = 0 0 0
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical

# lo. res.
geometry.prob_lo     =  -8  -8 -16
geometry.prob_hi     =  8   8 16
amr.n_cell           =  128 128 32

# ======== LOAD BALANCE ==========
amr.loadbalance_with_workestimates = 0
amr.loadbalance_level0_int = 10

# ======== GRID ==========
amr.max_level       = 1      # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 1 # refinement ratio
amr.regrid_int      = 2 2 2 2 2 # how often to regrid
amr.blocking_factor = 8
amr.max_grid_size   = 32
amr.n_error_buf     = 1 1 1 1 1 # number of buffer cells in error est
amr.grid_eff        = 0.99     # what constitutes an efficient grid
amr.subcycling_mode = Auto # time sub-cycling (Auto, None, Manual, Optimal)

# ======== EB ==========
eb2.small_volfrac = 1e-10

# ======== PARTICLES ==========
particles.do_particles = 0

# ======== OUTPUT ==========

# CHECKPOINT FILES
amr.checkpoint_files_output = 0
amr.check_file              = waveguide.chk    # root name of checkpoint file
amr.check_int               = -1    # number of timesteps between checkpoints
amr.check_per               = 0.05

# PLOTFILES
amr.plot_files_output = 1
amr.plot_file         = waveguide.plt     # root name of plotfile
amr.plot_int          = -1      # number of timesteps between plotfiles
amr.plot_per          = 0.1

#amr.restart = restart

# ======== PROBLEM DESCRIPTION ==========
# Note that the problem description is defined as a lua script
# Everything within the double quotes "..." must conform to lua standards
# Note that any strings should therefore be defined by single quotes '...'

mfp.lua = "
verbosity = 2
cfl = 0.5

time_integration_scheme = 'euler'

-- === DEFINE PROBLEM ===

lightspeed = 1.0

-- === DEFINE STATES ===

states = {

    field = {
        type='field',
        reconstruction='O6', 
        flux='RankineHugoniot',
        value = {
            x_D = function(dat) return math.exp(-1.0*(dat['y']+5)^2)*math.cos(dat['y']*3.14159265) end,
        },
        refinement={name='field_gradient', x_D=0.2, y_D=0.2, min_value=1e-2},
    }
}

-- === DEFINE ACTIONS ===

actions = {

  fluxes = {
    type = 'CTU',
    corner_transport=true,
    states = {'field'},
  },
  
}

-- === GEOMETRY ===

refine_cutcells = true

spline = PolySpline.new()

-- daisy-chain of points
spline:addLine({
  {-7, -9}, {-7, 3}, {-3, 7}, {9,7}, {9,3}, {1,3}, {-3,-1}, {-3, -9}, {-7, -9}
  }
)

--[[
-- daisy chain of points and control nodes {pt, node, node, pt, node, ...}
spline:addSpline({
  {0,-3}, 
  {1,-2}, {1,-2}, 
  {2,-1},
  {3,-2}, {3,-2}, 
  {4,-3}, 
  {3,-4}, {3,-4}, 
  {2,-5}, 
  {1,-4}, {1,-4}, 
  {0,-3}
  }
)
--]]

function lines(x, y)
  return spline:query(x, y)
end


embedded_boundaries = {

  C = {
    geom=lines,
    bcs={field={type='conductor'},
    },
    set='union',
  },

}
"
