#======== AMREX ==========
amrex.fpe_trap_invalid=1
amrex.fpe_trap_zero=1
fpe_trap_overflow=1
amr.v = 0

# ======== TIME ==========
max_step  = 1000000
stop_time = 0.4

# ======== DOMAIN ==========
geometry.is_periodic = 0 1 1
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical

# lo. res.
geometry.prob_lo     =     -1.0 0.0
geometry.prob_hi     =     1.0 1.0
amr.n_cell           =     64 64

# ======== LOAD BALANCE ==========
amr.loadbalance_with_workestimates = 0
amr.loadbalance_level0_int = 10

# ======== GRID ==========
amr.max_level       = 4      # maximum level number allowed
amr.ref_ratio       = 4 4 4 2 1 # refinement ratio
amr.regrid_int      = 2 2 2 2 2 # how often to regrid
amr.blocking_factor = 8
amr.max_grid_size   = 32
amr.n_error_buf     = 4 4 4 4 4 # number of buffer cells in error est
amr.grid_eff        = 0.99     # what constitutes an efficient grid
amr.subcycling_mode = Auto # time sub-cycling (Auto, None, Manual, Optimal)

# ======== GEOMETRY ==========
eb2.geom_type = all_regular

# ======== PARTICLES ==========
particles.do_particles = 0

# ======== OUTPUT ==========

# CHECKPOINT FILES
amr.checkpoint_files_output = 0
amr.check_file              = Riemann.chk    # root name of checkpoint file
amr.check_int               = -1    # number of timesteps between checkpoints
amr.check_per               = 0.1

# PLOTFILES
amr.plot_files_output = 1
amr.plot_file         = Riemann.plt     # root name of plotfile
amr.plot_int          = -1      # number of timesteps between plotfiles
amr.plot_per          = 0.1

# ======== PROBLEM DESCRIPTION ==========
# Note that the problem description is defined as a lua script
# Everything within the double quotes "..." must conform to lua standards
# Note that any strings should therefore be defined by single quotes '...'

mfp.lua = "
verbosity = 2
cfl = 0.3

force_dt = 0.0

-- === DEFINE PROBLEM ===

lightspeed = 5.0
beta = 1.0
skin_depth = 0.1

interface_x = 0.0

rho0 = 3.0
p0 = 3.0
u0 = 0.0
v0 = 0.0
w0 = 0.0

Bx0 = 1.5
By0 = 1.0
Bz0 = 0.0

rho1 = 1
p1 = 1
u1 = 0.0
v1 = 0.0
w1 = 0.0

Bx1 = 1.5
By1 = math.cos(1.5)
Bz1 = math.sin(1.5)

function step(A, B, x)
    if (x <= interface_x) then
        return A
    else
        return B
    end
end

-- === DEFINE STATES ===

states = {

    MHD = {
        type='mhd',
        mass=1.0,  
        gamma=5/3, 
        reconstruction='vanLeer', 
        flux='HLLE',
        value={
            rho = function(dat) return step(rho0, rho1, dat['x']) end,
            x_vel   = function(dat) return step(u0,   u1,   dat['x']) end,
            y_vel   = function(dat) return step(v0,   v1,   dat['x']) end,
            z_vel   = function(dat) return step(w0,   w1,   dat['x']) end,
            p   = function(dat) return step(p0,   p1,   dat['x']) end,
            x_B  = function(dat) return step(Bx0, Bx1, dat['x']) end,
            y_B  = function(dat) return step(By0, By1, dat['x']) end,
            z_B  = function(dat) return step(Bz0, Bz1, dat['x']) end,
            alpha  = function(dat) return step(0.0,  1.0,  dat['x']) end,
        },
        refine_grad_threshold = {rho=0.1, y_B=0.1, z_B=0.1, min_value=1e-2},
    },
}

"
