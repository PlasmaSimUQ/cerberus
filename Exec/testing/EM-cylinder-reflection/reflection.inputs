#======== AMREX ==========
amrex.fpe_trap_invalid=1
amrex.fpe_trap_zero=1
fpe_trap_overflow=1
amr.v = 0

# ======== TIME ==========
max_step  = 1000000
stop_time = 20

# ======== DOMAIN ==========
geometry.is_periodic = 0 0 0
geometry.coord_sys   = 0  # 0 => cart, 1 => RZ  2=>spherical

# lo. res.
geometry.prob_lo     =     -8 -8
geometry.prob_hi     =     8 8
amr.n_cell           =     800 800

# ======== LOAD BALANCE ==========
amr.loadbalance_with_workestimates = 1
amr.loadbalance_level0_int = 10

# ======== GRID ==========
amr.max_level       = 0   # maximum level number allowed
amr.ref_ratio       = 2 2 2 2 2 2  # refinement ratio
amr.regrid_int      = 2 2 2 2 2 2  # how often to regrid
amr.blocking_factor = 8
amr.max_grid_size   = 32
amr.n_error_buf     = 1 1 1 1 1 1  # number of buffer cells in error est
amr.grid_eff        = 0.99     # what constitutes an efficient grid
amr.subcycling_mode = Auto # time sub-cycling (Auto, None, Manual, Optimal)

# ======== PARTICLES ==========
particles.do_particles = 0
particles.v = 0


# ======== OUTPUT ==========

# CHECKPOINT FILES
amr.checkpoint_files_output = 0
amr.check_file              = reflection.chk    # root name of checkpoint file
amr.check_int               = -1    # number of timesteps between checkpoints
amr.check_per               = 1.0

# PLOTFILES
amr.plot_files_output = 1
amr.plot_file         = reflection.plt     # root name of plotfile
amr.plot_int          = -1      # number of timesteps between plotfiles
amr.plot_per          = 1.0


#amr.restart =


# ======== PROBLEM DESCRIPTION ==========
# Note that the problem description is defined as a lua script
# Everything within the double quotes "..." must conform to lua standards
# Note that any strings should therefore be defined by single quotes '...'

mfp.lua = "
verbosity = 2
cfl = 0.5

-- === DEFINE PROBLEM ===

lightspeed = 1.0
Larmor = 1.0
Debye = 1.0

-- === DEFINE STATES ===

states = {

    field = {
        type='field',
        reconstruction='O6', 
        flux='RankineHugoniot',

        eb_divergence={
          type='merge',
          merge_threshold=0.5,
        },
    },
}

-- === SOURCE TERMS ===

function wire(dat)
  local x = dat['x']
  local y = dat['y']
  local t = dat['t']

  local xlo = -3.1
  local xhi = -2.9
  local ylo = -0.1
  local yhi = 0.1

  if ((x >= xlo and x <= xhi) and (y >= ylo and y <= yhi)) then
    return math.cos(2*math.pi*t)
  else
    return 0
   end
end

sources = {

    wire={
        solver = 'explicit',
        sources = {
            current={'field', type='current', z=wire,},
            -- div_clean={'field', ratio_D=0.1, type=damp_divergence},
        },
    },
}

-- === GEOMETRY ===

refine_cutcells = 1


function make_circles(x,y,collection)

    local d, dd

    for i, v in ipairs(collection) do
      dd = v[1]^2 - ((x-v[2])^2 + (y-v[3])^2)
      if (i == 1) then
          d = dd
      end
      d = math.max(d, dd)
    end

    return -d

end

function cylinder(x,y)

    local circles = {
      {1.0, 0.0, 0.0, 0.0},
    }

    return -make_circles(x,y,circles)
end


embedded_boundaries = {

    metal = {
      geom=cylinder,
      bcs={field={type='conductor'},
      },
      set='union',
    },

}

"

