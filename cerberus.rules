# colours
GREEN := $(shell echo -e "\033[0;32m")
YELLOW := $(shell echo -e "\033[0;33m")
RED := $(shell echo -e "\033[0;31m")
END := $(shell echo -e "\033[0m")

EBASE := MFP.

#=== EILMER GAS ===

EILMER_SRC = $(TOP)/gdtk
ifeq ($(EILMER_GAS), TRUE)
LIBRARY_LOCATIONS += $(DLANG_LIB) $(EILMER_LIB)
LIBRARIES         += -lgas
USERSuffix := $(USERSuffix).EILMER
DEFINES += -DEILMER_GAS
LIBRARIES += -Wl,-rpath=$(EILMER_LIB)
endif

#=== PPROF ===

ifeq ($(PPROF), TRUE)
INCLUDE_LOCATIONS += $(PPROF_INCLUDE)
LIBRARY_LOCATIONS += $(PPROF_LIB)
LIBRARIES         += -lprofiler
USERSuffix := $(USERSuffix).PPROF
DEFINES += -DPPROF
endif

#=== EB ===

ifeq ($(DIM), 1)
USE_EB := FALSE
endif

ifeq ($(USE_EB), TRUE)
USERSuffix := $(USERSuffix).EB
endif

#=== PYTHON ===

ifeq ($(PYTHON_PLOT), TRUE)
INCLUDE_LOCATIONS += $(PYTHON_INCLUDE)
LIBRARY_LOCATIONS += $(PYTHON_LIB)
LIBRARIES         += -l$(notdir $(PYTHON_INCLUDE))
USERSuffix := $(USERSuffix).PYTHON
DEFINES += -DPYTHON
endif

#=== PARTICLES ===

ifeq ($(DIM), 1)
AMREX_PARTICLES := FALSE
endif

ifeq ($(AMREX_PARTICLES), TRUE)
DEFINES += -DAMREX_PARTICLES
USERSuffix := $(USERSuffix).PARTICLES
endif

#=== SYMPLECTIC INTERPOLANT ===
ifeq ($(SYMPLECTIC),P8R2)
DEFINES += -DINTERPOLATION_P8R2 -DWRANGE=2 -DSYMPLECTIC
USERSuffix := $(USERSuffix).SYMPLECTIC_P8R2
endif

ifeq ($(SYMPLECTIC),PWL)
DEFINES += -DINTERPOLATION_PWL -DWRANGE=1 -DSYMPLECTIC
USERSuffix := $(USERSuffix).SYMPLECTIC_PWL
endif

CERBERUS_GIT_NAME := $(shell git branch | grep \* | sed 's/[(*) ]/_/g')
CERBERUS_GIT_VERSION := $(shell git describe --abbrev=12 --dirty --always --tags)
DEFINES += -DCERBERUS_GIT_VERSION=\"$(CERBERUS_GIT_VERSION)\"
DEFINES += -DCERBERUS_GIT_NAME=\"$(CERBERUS_GIT_NAME)\"

DEFINES += -DAMREX_CRSEGRNDOMP

include $(AMREX_HOME)/Tools/GNUMake/Make.defs

include $(TOP)/Source/Make.package
include $(AMREX_HOME)/Src/Base/Make.package
include $(AMREX_HOME)/Src/Boundary/Make.package
include $(AMREX_HOME)/Src/AmrCore/Make.package
include $(AMREX_HOME)/Src/Amr/Make.package
include $(AMREX_HOME)/Src/LinearSolvers/MLMG/Make.package

ifeq ($(USE_EB), TRUE)
include $(AMREX_HOME)/Src/EB/Make.package
endif

ifeq ($(AMREX_PARTICLES), TRUE)
include $(AMREX_HOME)/Src/Particle/Make.package
endif

ifeq ($(USE_CCACHE), TRUE)
  ifeq (, $(shell command -v ccache))
    override USE_CCACHE=FALSE
	  @echo "${YELLOW}USE_CCACHE=TRUE, but 'ccache' command can't be found, install it for faster re-compiles. Forcing USE_CCACHE=FALSE${END}."
  endif
endif

include $(AMREX_HOME)/Tools/GNUMake/Make.rules

define ENVVARS
	export DGD=$(EILMER_HOME)
	export DGD_REPO=$(TOP)/.gdtk_git
	export PATH=$$PATH:$$DGD/bin
	export DGD_LUA_PATH=$$DGD/lib/?.lua
	export DGD_LUA_CPATH=$$DGD/lib/?.so
endef

export ENVVARS

# store the executable name
EXEC_PATH:=$(.DEFAULT_GOAL)
ifneq ($(BUILD_ACTUAL), TRUE)
    .DEFAULT_GOAL = cerberus
endif

ifeq ($(BUILD_ACTUAL), TRUE)
    $(info ${GREEN}Building $(.DEFAULT_GOAL)${END})
endif

.PHONY: cerberus
cerberus: env
	@echo "${GREEN}Building cerberus${END}"
ifeq ($(EILMER_GAS), TRUE)
	@echo "${GREEN}(Re-)Building UQ GDTk${END}"
	EILMER_SRC='$(EILMER_SRC)' EILMER_HOME='$(EILMER_HOME)' MF='$(MAKEFLAGS)' ./build_eilmer.sh
endif
	@$(MAKE) BUILD_ACTUAL=TRUE
	@echo "${GREEN}${EXEC_PATH} has been generated${END}"

env:
	rm -f env && \
	echo "$$ENVVARS" > env

.PHONY: uninstall_eilmer
uninstall_eilmer:
	rm -rf $(EILMER_HOME)

.PHONY: eilmer
eilmer:
	@echo "${GREEN}(Re-)Building UQ GDTk${END}"
	EILMER_SRC='$(EILMER_SRC)' EILMER_HOME='$(EILMER_HOME)' MF='$(MAKEFLAGS)' ./build_eilmer.sh

.PHONY: clean_eilmer
clean_eilmer:
	$(MAKE) -C $(EILMER_SRC)/src/gas clean
	$(MAKE) -C $(EILMER_SRC)/src/eilmer clean
	$(MAKE) -C $(EILMER_SRC)/extern/lua-5.4.3 clean

.PHONY: clean_all
clean_all: | uninstall_eilmer clean_eilmer clean

.PHONY: develop
develop:
	@echo "${GREEN}Beginning development build of cerberus${END}";\
    rm -rf tmp_build_dir;\
    bear -- ${MAKE} DEBUG=TRUE;\
    echo "${GREEN}compile_commands.json generated${END}";\
    echo "${GREEN}The development binary ${EXEC_PATH} has been generated${END}";\
